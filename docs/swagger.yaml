definitions:
  model.BidHistory:
    properties:
      bidamount:
        type: integer
      biddate:
        type: string
      images:
        items:
          type: string
        type: array
      itemid:
        type: integer
      itemname:
        type: string
      sessionenddate:
        type: string
      sessionid:
        type: integer
      sessionstartdate:
        type: string
    type: object
  model.BidSessionLog:
    properties:
      amount:
        type: integer
      createAt:
        type: string
      sessionid:
        type: integer
      userid:
        type: string
    type: object
  model.Categories:
    properties:
      categoriesid:
        type: integer
      categoriesname:
        type: string
    type: object
  model.Deletelastlog:
    properties:
      sessionid:
        type: integer
      userid:
        type: string
    required:
    - sessionid
    - userid
    type: object
  model.Items:
    properties:
      categoriesid:
        type: integer
      createAt:
        type: string
      itemcondition:
        type: string
      itemdescription:
        type: string
      itemid:
        type: integer
      itemname:
        type: string
    type: object
  model.NewBidLog:
    properties:
      amount:
        type: integer
      sessionid:
        type: integer
    required:
    - amount
    - sessionid
    type: object
  model.SellHistory:
    properties:
      images:
        items:
          type: string
        type: array
      itemid:
        type: integer
      itemname:
        type: string
      sessionenddate:
        type: string
      sessionid:
        type: integer
      sessionstartdate:
        type: string
    type: object
  model.SessionSearch:
    properties:
      biddingLog:
        items:
          $ref: '#/definitions/model.BidSessionLog'
        type: array
      categoriesid:
        type: integer
      categoriesname:
        type: string
      currentbid:
        type: integer
      enddate:
        type: string
      imagelink:
        items:
          type: string
        type: array
      itemcondition:
        type: string
      itemdescription:
        type: string
      itemid:
        type: integer
      itemname:
        type: string
      minimumincreasebid:
        type: integer
      sellerid:
        type: string
      sellername:
        type: string
      sessionid:
        type: integer
      startdate:
        type: string
      viewcount:
        type: integer
    required:
    - categoriesid
    - currentbid
    - itemcondition
    - itemdescription
    - itemname
    - minimumincreasebid
    type: object
  model.UserCommon:
    properties:
      accesslevel:
        type: integer
      address:
        type: string
      avatarimage:
        type: string
      createAt:
        type: string
      email:
        type: string
      gender:
        type: integer
      name:
        type: string
      password:
        type: string
      phone:
        type: string
      userid:
        type: string
    type: object
  model.UserReview:
    properties:
      content:
        type: string
      score:
        type: integer
      sessionid:
        type: integer
      targetid:
        type: string
      writerid:
        type: string
    type: object
info:
  contact: {}
  license: {}
paths:
  /categories:
    get:
      description: Search categories by id, return all by default, return a JSON form
      parameters:
      - description: id of categories, if empty then return all
        in: query
        name: id
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Categories'
        "500":
          description: Error message
          schema:
            type: body
    post:
      description: Create new Categories, return a JSON message
      responses:
        "200":
          description: Success message
          schema:
            type: body
        "500":
          description: Error message
          schema:
            type: body
  /history/bid:
    get:
      description: Get bid activity/history of user.
      parameters:
      - description: Session token
        in: header
        name: Authorization
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.BidHistory'
        "400":
          description: Error message
          schema:
            type: body
        "401":
          description: Error message
          schema:
            type: body
        "500":
          description: Error message
          schema:
            type: body
  /history/sell:
    get:
      description: Get sell history of user.
      parameters:
      - description: Session token
        in: header
        name: Authorization
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.SellHistory'
        "400":
          description: Error message
          schema:
            type: body
        "401":
          description: Error message
          schema:
            type: body
        "500":
          description: Error message
          schema:
            type: body
  /login:
    post:
      description: Login by JSON form, return a jwt session token in JSON form
      parameters:
      - description: username
        in: body
        name: userid
        required: true
        schema:
          type: string
      - description: password
        in: body
        name: password
        required: true
        schema:
          type: string
      responses:
        "200":
          description: Session token
          schema:
            type: body
        "400":
          description: Error message
          schema:
            type: body
        "500":
          description: Error message
          schema:
            type: body
  /logs:
    post:
      description: Create a new bidding session , return a JSON message
      parameters:
      - description: Session token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Information to be provided
        in: body
        name: NewBidInfo
        required: true
        schema:
          $ref: '#/definitions/model.NewBidLog'
      responses:
        "200":
          description: Success message
          schema:
            type: body
        "400":
          description: Error message
          schema:
            type: body
        "401":
          description: Error message
          schema:
            type: body
        "500":
          description: Error message
          schema:
            type: body
  /logs/:id:
    get:
      description: Get Bid Session Logs by session ID, return a JSON form
      parameters:
      - description: Session id
        in: path
        name: id
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.BidSessionLog'
        "500":
          description: Error message
          schema:
            type: body
  /logs/last:
    delete:
      description: Delete the last bid log (Administrator only)
      parameters:
      - description: Session token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Bid Log info
        in: body
        name: LogInfo
        required: true
        schema:
          $ref: '#/definitions/model.Deletelastlog'
      responses:
        "200":
          description: Success message
          schema:
            type: body
        "400":
          description: Error message
          schema:
            type: body
        "401":
          description: Error message
          schema:
            type: body
        "500":
          description: Error message
          schema:
            type: body
  /password:
    put:
      description: Add new item to wishlist, return a JSON message
      parameters:
      - description: Session token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Old Password
        in: body
        name: oldpassword
        required: true
        schema:
          type: string
      - description: New Password
        in: body
        name: newpassword
        required: true
        schema:
          type: string
      responses:
        "200":
          description: Success message
          schema:
            type: body
        "400":
          description: Error message
          schema:
            type: body
        "401":
          description: Error message
          schema:
            type: body
        "500":
          description: Error message
          schema:
            type: body
  /profile:
    get:
      description: Show user profile, return user general profile in JSON form
      parameters:
      - description: Session token
        in: header
        name: Authorization
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.UserCommon'
        "400":
          description: Error message
          schema:
            type: body
        "401":
          description: Error message
          schema:
            type: body
        "500":
          description: Error message
          schema:
            type: body
    put:
      description: Modify/Update user profile, return message in JSON form
      parameters:
      - description: Session token
        in: header
        name: Authorization
        required: true
        type: string
      responses:
        "200":
          description: Success message
          schema:
            type: body
        "400":
          description: Error message
          schema:
            type: body
        "401":
          description: Error message
          schema:
            type: body
        "500":
          description: Error message
          schema:
            type: body
  /review/:id:
    get:
      description: Show review of User by User ID, return a JSON form
      parameters:
      - description: User id
        in: path
        name: id
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.UserReview'
        "500":
          description: Error message
          schema:
            type: body
  /session:
    get:
      description: Search Session by query, return a JSON form
      parameters:
      - description: Name of the item (or part of it)
        in: query
        name: name
        required: true
        type: string
      - description: Item Categories by number
        in: query
        name: categories
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.SessionSearch'
        "500":
          description: Error message
          schema:
            type: body
    post:
      description: Create a new bidding session , return a JSON message
      parameters:
      - description: Session token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Information to be provided
        in: body
        name: NewSessionInfo
        required: true
        schema:
          $ref: '#/definitions/model.SessionSearch'
      responses:
        "200":
          description: Success message
          schema:
            type: body
        "400":
          description: Error message
          schema:
            type: body
        "401":
          description: Error message
          schema:
            type: body
        "500":
          description: Error message
          schema:
            type: body
  /session/:id:
    delete:
      description: Delete bid session (Administrator only)
      parameters:
      - description: Session token
        in: header
        name: Authorization
        required: true
        type: string
      - description: session id to be deleted
        in: path
        name: sessionid
        required: true
        type: string
      responses:
        "200":
          description: Success message
          schema:
            type: body
        "400":
          description: Error message
          schema:
            type: body
        "401":
          description: Error message
          schema:
            type: body
        "500":
          description: Error message
          schema:
            type: body
    get:
      description: Show Session information by ID, return a JSON form
      parameters:
      - description: Session id
        in: path
        name: id
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.SessionSearch'
        "500":
          description: Error message
          schema:
            type: body
  /signup:
    post:
      description: Register new Account in JSON form, return a jwt session token in
        JSON form
      parameters:
      - description: username
        in: body
        name: userid
        required: true
        schema:
          type: string
      - description: password
        in: body
        name: password
        required: true
        schema:
          type: string
      responses:
        "200":
          description: Session token
          schema:
            type: body
        "400":
          description: Error message
          schema:
            type: body
        "500":
          description: Error message
          schema:
            type: body
  /upload:
    post:
      description: Upload one or multiples photos of item , return a JSON message
      parameters:
      - description: Session token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Item id to be removed from wishlist
        in: path
        name: itemid
        required: true
        type: string
      responses:
        "200":
          description: Success message
          schema:
            type: body
        "400":
          description: Error message
          schema:
            type: body
        "401":
          description: Error message
          schema:
            type: body
        "500":
          description: Error message
          schema:
            type: body
  /wishlist:
    get:
      description: Show user WishList, return a JSON form
      parameters:
      - description: Session token
        in: header
        name: Authorization
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Items'
        "400":
          description: Error message
          schema:
            type: body
        "401":
          description: Error message
          schema:
            type: body
        "500":
          description: Error message
          schema:
            type: body
  /wishlist/:id:
    delete:
      description: Remove item from wishlist, return a JSON message
      parameters:
      - description: Session token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Item id to be removed from wishlist
        in: path
        name: itemid
        required: true
        type: string
      responses:
        "200":
          description: Success message
          schema:
            type: body
        "400":
          description: Error message
          schema:
            type: body
        "401":
          description: Error message
          schema:
            type: body
        "500":
          description: Error message
          schema:
            type: body
    post:
      description: Add new item to wishlist, return a JSON message
      parameters:
      - description: Session token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Item id to be added to wishlist
        in: path
        name: itemid
        required: true
        type: string
      responses:
        "200":
          description: Success message
          schema:
            type: body
        "400":
          description: Error message
          schema:
            type: body
        "401":
          description: Error message
          schema:
            type: body
        "500":
          description: Error message
          schema:
            type: body
swagger: "2.0"
